import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import {
  Box,
  Paper,
  Typography,
  Button,
  Grid,
  Card,
  CardContent,
  Tab,
  Tabs,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  Alert,
  IconButton,
  Tooltip,
  CircularProgress,
  InputAdornment,
  Divider
} from '@mui/material';
import {
  AttachMoney,
  Receipt,
  TrendingUp,
  Warning,
  Add,
  Edit,
  Visibility,
  Email,
  Download,
  Payment,
  AccountBalance,
  DateRange,
  Business,
  Settings,
  Refresh,
  CheckCircle,
  Cancel,
  Print,
  Assessment,
  MoneyOff,
  Delete
} from '@mui/icons-material';
import { format, startOfMonth, endOfMonth } from 'date-fns';
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api';

function TabPanel({ children, value, index }) {
  return (
    <div hidden={value !== index}>
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

function Financial() {
  const { user } = useAuth();
  const location = useLocation();
  
  // Determine initial tab based on route
  const getInitialTab = () => {
    const path = location.pathname;
    if (path.includes('invoices')) return 1;
    if (path.includes('expenses')) return 2;
    if (path.includes('settings')) return 3;
    return 0;
  };

  // State declarations
  const [tabValue, setTabValue] = useState(getInitialTab());
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState({ type: '', text: '' });

  // Dashboard data
  const [dashboardData, setDashboardData] = useState({
    totalRevenue: 0,
    totalExpenses: 0,
    pendingInvoices: 0,
    monthlyRevenue: 0,
    monthlyExpenses: 0,
    recentTransactions: []
  });

  // Invoices
  const [invoices, setInvoices] = useState([]);
  const [selectedInvoice, setSelectedInvoice] = useState(null);
  const [openInvoiceDialog, setOpenInvoiceDialog] = useState(false);
  const [openPaymentDialog, setOpenPaymentDialog] = useState(false);
  const [openViewInvoiceDialog, setOpenViewInvoiceDialog] = useState(false);
const [editingInvoice, setEditingInvoice] = useState(false);
const [editInvoiceForm, setEditInvoiceForm] = useState({
  invoice_date: '',
  due_date: '',
  items: [],
  notes: '',
  tax_rate: 0,
  discount: 0
});

  // Expenses
  const [expenses, setExpenses] = useState([]);
  const [openExpenseDialog, setOpenExpenseDialog] = useState(false);
  const [openEditExpenseDialog, setOpenEditExpenseDialog] = useState(false);
  const [editingExpense, setEditingExpense] = useState(null);
  const [creatingExpense, setCreatingExpense] = useState(false);

  // Settings
  const [financialSettings, setFinancialSettings] = useState({});
  const [settingsForm, setSettingsForm] = useState({
    company_name: '',
    company_address: '',
    company_phone: '',
    company_email: '',
    tax_number: '',
    invoice_prefix: '',
    invoice_notes: ''
  });
  const [banks, setBanks] = useState([]);
  const [openBankDialog, setOpenBankDialog] = useState(false);
  const [bankForm, setBankForm] = useState({
    bank_name: '',
    account_number: '',
    account_name: '',
    account_type: 'current'
  });

  // Other data
  const [clients, setClients] = useState([]);
  const [projects, setProjects] = useState([]);
  const [bookings, setBookings] = useState([]);

  // Filters
  const [filters, setFilters] = useState({
    start_date: startOfMonth(new Date()).toISOString().split('T')[0],
    end_date: endOfMonth(new Date()).toISOString().split('T')[0],
    status: '',
    client_id: ''
  });

  // Forms
  const [invoiceForm, setInvoiceForm] = useState({
    client_id: '',
    project_id: '',
    invoice_date: new Date().toISOString().split('T')[0],
    due_date: new Date(Date.now() + 30*24*60*60*1000).toISOString().split('T')[0],
    items: [{ description: '', quantity: 1, unit_price: 0 }],
    notes: '',
    tax_rate: 0,
    discount: 0
  });

  const [paymentForm, setPaymentForm] = useState({
    invoice_id: '',
    payment_date: new Date().toISOString().split('T')[0],
    amount: 0,
    payment_method: '',
    reference_number: '',
    notes: ''
  });

  const [expenseForm, setExpenseForm] = useState({
    expense_date: new Date().toISOString().split('T')[0],
    category: '',
    vendor: '',
    description: '',
    amount: 0,
    payment_method: '',
    receipt_url: '',
    expense_type: 'company',
    project_id: '',
    client_id: '',
    department: ''
  });

  // Constants
  const paymentMethods = [
    { value: 'cash', label: 'Cash' },
    { value: 'bank_transfer', label: 'Bank Transfer' },
    { value: 'credit_card', label: 'Credit Card' },
    { value: 'check', label: 'Check' },
    { value: 'mobile_payment', label: 'Mobile Payment' }
  ];

  const expenseCategories = [
    'Equipment', 'Utilities', 'Rent', 'Salaries', 'Marketing',
    'Travel', 'Office Supplies', 'Software', 'Maintenance', 'Other'
  ];

  const departments = [
    'Recording Studio',
    'Photo Studio',
    'Outside Project'
  ];

  const expenseTypes = [
    { value: 'company', label: 'Company (Global)' },
    { value: 'department', label: 'Department' },
    { value: 'project', label: 'Project' },
    { value: 'client', label: 'Client' }
  ];

  // Effects
  useEffect(() => {
    fetchDashboardData();
    fetchInvoices();
    fetchExpenses();
    fetchClients();
    fetchProjects();
    fetchSettings();
    fetchBanks();
  }, [filters]);

  useEffect(() => {
    const path = location.pathname;
    if (path.includes('invoices')) setTabValue(1);
    else if (path.includes('expenses')) setTabValue(2);
    else if (path.includes('settings')) setTabValue(3);
    else setTabValue(0);
  }, [location]);

  // Fetch functions
  const fetchDashboardData = async () => {
    try {
      const response = await api.get('/financial/dashboard', { params: filters });
      setDashboardData(response.data);
    } catch (error) {
      console.error('Error fetching dashboard:', error);
    }
  };

  const fetchInvoices = async () => {
    try {
      const response = await api.get('/financial/invoices', { params: filters });
      setInvoices(response.data);
    } catch (error) {
      console.error('Error fetching invoices:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchExpenses = async () => {
    try {
      const response = await api.get('/financial/expenses', { params: filters });
      setExpenses(response.data);
    } catch (error) {
      console.error('Error fetching expenses:', error);
    }
  };

  const fetchClients = async () => {
    try {
      const response = await api.get('/clients');
      setClients(response.data);
    } catch (error) {
      console.error('Error fetching clients:', error);
    }
  };

  const fetchProjects = async () => {
    try {
      const response = await api.get('/projects');
      setProjects(response.data);
    } catch (error) {
      console.error('Error fetching projects:', error);
    }
  };

  const fetchSettings = async () => {
    try {
      const response = await api.get('/financial/settings');
      setFinancialSettings(response.data);
      if (response.data) {
        setSettingsForm(response.data);
      }
    } catch (error) {
      console.error('Error fetching settings:', error);
    }
  };

  const fetchBanks = async () => {
    try {
      const response = await api.get('/financial/banks');
      setBanks(response.data);
    } catch (error) {
      console.error('Error fetching banks:', error);
    }
  };

  // Handler functions
  const handleCreateInvoice = async () => {
    try {
      // Calculate totals
      const subtotal = invoiceForm.items.reduce((sum, item) => 
        sum + (item.quantity * item.unit_price), 0
      );
      const tax_amount = subtotal * (invoiceForm.tax_rate / 100);
      const discount_amount = invoiceForm.discount;
      const total_amount = subtotal + tax_amount - discount_amount;

      await api.post('/financial/invoices', {
        ...invoiceForm,
        subtotal,
        tax_amount,
        discount_amount,
        total_amount
      });

      setMessage({ type: 'success', text: 'Invoice created successfully' });
      setOpenInvoiceDialog(false);
      fetchInvoices();
      fetchDashboardData();
      
      // Reset form
      setInvoiceForm({
        client_id: '',
        project_id: '',
        invoice_date: new Date().toISOString().split('T')[0],
        due_date: new Date(Date.now() + 30*24*60*60*1000).toISOString().split('T')[0],
        items: [{ description: '', quantity: 1, unit_price: 0 }],
        notes: '',
        tax_rate: 0,
        discount: 0
      });
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to create invoice' });
    }
  };

  const handleRecordPayment = async () => {
    try {
      await api.post('/financial/payments', paymentForm);
      setMessage({ type: 'success', text: 'Payment recorded successfully' });
      setOpenPaymentDialog(false);
      fetchInvoices();
      fetchDashboardData();
      
      // Reset form
      setPaymentForm({
        invoice_id: '',
        payment_date: new Date().toISOString().split('T')[0],
        amount: 0,
        payment_method: '',
        reference_number: '',
        notes: ''
      });
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to record payment' });
    }
  };

  const handleCreateExpense = async () => {
    if (creatingExpense) return;
    
    try {
      setCreatingExpense(true);
      
      if (!expenseForm.amount || expenseForm.amount <= 0) {
        setMessage({ type: 'error', text: 'Please enter a valid amount' });
        setCreatingExpense(false);
        return;
      }
      
      // Convert empty strings to null
      const processedForm = {
        ...expenseForm,
        project_id: expenseForm.project_id || null,
        client_id: expenseForm.client_id || null,
        department: expenseForm.department || null,
        receipt_url: expenseForm.receipt_url || null
      };
      
      await api.post('/financial/expenses', processedForm);
      setMessage({ type: 'success', text: 'Expense recorded successfully' });
      setOpenExpenseDialog(false);
      fetchExpenses();
      fetchDashboardData();
      
      // Reset form
      setExpenseForm({
        expense_date: new Date().toISOString().split('T')[0],
        category: '',
        vendor: '',
        description: '',
        amount: 0,
        payment_method: '',
        receipt_url: '',
        expense_type: 'company',
        project_id: '',
        client_id: '',
        department: ''
      });
    } catch (error) {
      setMessage({ 
        type: 'error', 
        text: error.response?.data?.message || 'Failed to record expense' 
      });
    } finally {
      setCreatingExpense(false);
    }
  };

  const handleUpdateExpense = async () => {
    try {
      await api.put(`/financial/expenses/${editingExpense.id}`, expenseForm);
      setMessage({ type: 'success', text: 'Expense updated successfully' });
      setOpenEditExpenseDialog(false);
      fetchExpenses();
      setEditingExpense(null);
      // Reset form
      setExpenseForm({
        expense_date: new Date().toISOString().split('T')[0],
        category: '',
        vendor: '',
        description: '',
        amount: 0,
        payment_method: '',
        receipt_url: '',
        expense_type: 'company',
        project_id: '',
        client_id: '',
        department: ''
      });
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to update expense' });
    }
  };

  const handleUpdateExpenseStatus = async (expenseId, newStatus) => {
    try {
      await api.put(`/financial/expenses/${expenseId}/status`, { status: newStatus });
      setMessage({ type: 'success', text: 'Expense status updated' });
      fetchExpenses();
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to update status' });
    }
  };

  const handleEditExpense = (expense) => {
    setEditingExpense(expense);
    setExpenseForm({
      expense_date: expense.expense_date.split('T')[0],
      category: expense.category,
      vendor: expense.vendor || '',
      description: expense.description || '',
      amount: expense.amount,
      payment_method: expense.payment_method || '',
      receipt_url: expense.receipt_url || '',
      expense_type: expense.expense_type || 'company',
      project_id: expense.project_id || '',
      client_id: expense.client_id || '',
      department: expense.department || ''
    });
    setOpenEditExpenseDialog(true);
  };

  const handleUpdateSettings = async () => {
    try {
      await api.put('/financial/settings', settingsForm);
      setMessage({ type: 'success', text: 'Settings updated successfully' });
      fetchSettings();
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to update settings' });
    }
  };

  const handleAddBank = async () => {
    try {
      await api.post('/financial/banks', bankForm);
      setMessage({ type: 'success', text: 'Bank added successfully' });
      setOpenBankDialog(false);
      fetchBanks();
      setBankForm({
        bank_name: '',
        account_number: '',
        account_name: '',
        account_type: 'current'
      });
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to add bank' });
    }
  };

  const handleDeleteBank = async (bankId) => {
    if (window.confirm('Are you sure you want to delete this bank?')) {
      try {
        await api.delete(`/financial/banks/${bankId}`);
        setMessage({ type: 'success', text: 'Bank deleted successfully' });
        fetchBanks();
      } catch (error) {
        setMessage({ type: 'error', text: 'Failed to delete bank' });
      }
    }
  };

  // Utility functions
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-NG', {
      style: 'currency',
      currency: 'NGN'
    }).format(amount || 0);
  };
const formatDate = (dateString) => {
  if (!dateString) return '-';
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '-';
    return format(date, 'MMM dd, yyyy');
  } catch (error) {
    console.error('Date formatting error:', dateString, error);
    return '-';
  }
};

  const getDepartmentStats = () => {
    const departmentExpenses = {};
    departments.forEach(dept => {
      departmentExpenses[dept] = expenses
        .filter(exp => exp.expense_type === 'department' && exp.department === dept)
        .reduce((sum, exp) => sum + parseFloat(exp.amount), 0);
    });
    return departmentExpenses;
  };

  const handleSendInvoice = async (invoiceId) => {
    try {
      await api.post(`/financial/invoices/${invoiceId}/send`);
      setMessage({ type: 'success', text: 'Invoice sent successfully' });
      fetchInvoices();
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to send invoice' });
    }
  };

  const handleDownloadInvoice = async (invoiceId) => {
    try {
      const response = await api.get(`/financial/invoices/${invoiceId}/download`, {
        responseType: 'blob'
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `invoice-${invoiceId}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to download invoice' });
    }
  };

  const addInvoiceItem = () => {
    setInvoiceForm({
      ...invoiceForm,
      items: [...invoiceForm.items, { description: '', quantity: 1, unit_price: 0 }]
    });
  };

  const updateInvoiceItem = (index, field, value) => {
    const newItems = [...invoiceForm.items];
    newItems[index][field] = field === 'description' ? value : parseFloat(value) || 0;
    setInvoiceForm({ ...invoiceForm, items: newItems });
  };

  const removeInvoiceItem = (index) => {
    const newItems = invoiceForm.items.filter((_, i) => i !== index);
    setInvoiceForm({ ...invoiceForm, items: newItems });
  };

  const calculateInvoiceTotal = () => {
    const subtotal = invoiceForm.items.reduce((sum, item) => 
      sum + (item.quantity * item.unit_price), 0
    );
    const tax = subtotal * (invoiceForm.tax_rate / 100);
    const total = subtotal + tax - invoiceForm.discount;
    return { subtotal, tax, total };
  };

  const isAdmin = user?.roles?.includes('admin') || user?.role === 'admin';

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">Financial Management</Typography>
        <Box>
          <IconButton onClick={() => {
            fetchDashboardData();
            fetchInvoices();
            fetchExpenses();
          }}>
            <Refresh />
          </IconButton>
        </Box>
      </Box>

      {message.text && (
        <Alert severity={message.type} onClose={() => setMessage({ type: '', text: '' })} sx={{ mb: 2 }}>
          {message.text}
        </Alert>
      )}

      <Paper>
        <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)}>
          <Tab label="Dashboard" icon={<Assessment />} />
          <Tab label="Invoices" icon={<Receipt />} />
          <Tab label="Expenses" icon={<MoneyOff />} />
          {isAdmin && <Tab label="Settings" icon={<Settings />} />}
        </Tabs>

        {/* Dashboard Tab */}
        <TabPanel value={tabValue} index={0}>
          <Grid container spacing={3}>
            {/* Summary Cards */}
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Box display="flex" alignItems="center" justifyContent="space-between">
                    <Box>
                      <Typography color="textSecondary" gutterBottom>
                        Total Revenue
                      </Typography>
                      <Typography variant="h5">
                        {formatCurrency(dashboardData.totalRevenue)}
                      </Typography>
                    </Box>
                    <AttachMoney color="success" sx={{ fontSize: 40 }} />
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Box display="flex" alignItems="center" justifyContent="space-between">
                    <Box>
                      <Typography color="textSecondary" gutterBottom>
                        Pending Invoices
                      </Typography>
                      <Typography variant="h5">
                        {dashboardData.pendingInvoices}
                      </Typography>
                    </Box>
                    <Warning color="warning" sx={{ fontSize: 40 }} />
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Box display="flex" alignItems="center" justifyContent="space-between">
                    <Box>
                      <Typography color="textSecondary" gutterBottom>
                        Total Expenses
                      </Typography>
                      <Typography variant="h5">
                        {formatCurrency(dashboardData.totalExpenses)}
                      </Typography>
                    </Box>
                    <MoneyOff color="error" sx={{ fontSize: 40 }} />
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Box display="flex" alignItems="center" justifyContent="space-between">
                    <Box>
                      <Typography color="textSecondary" gutterBottom>
                        Net Profit
                      </Typography>
                      <Typography variant="h5">
                        {formatCurrency(dashboardData.totalRevenue - dashboardData.totalExpenses)}
                      </Typography>
                    </Box>
                    <TrendingUp color="primary" sx={{ fontSize: 40 }} />
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            {/* Department Expenses */}
            <Grid item xs={12}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    Department Expenses
                  </Typography>
                  <Grid container spacing={2}>
                    {Object.entries(getDepartmentStats()).map(([dept, amount]) => (
                      <Grid item xs={12} sm={4} key={dept}>
                        <Box>
                          <Typography variant="subtitle2" color="text.secondary">
                            {dept}
                          </Typography>
                          <Typography variant="h6">
                            {formatCurrency(amount)}
                          </Typography>
                        </Box>
                      </Grid>
                    ))}
                  </Grid>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </TabPanel>

        {/* Invoices Tab */}
        <TabPanel value={tabValue} index={1}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">Invoices</Typography>
            <Button
              variant="contained"
              startIcon={<Add />}
              onClick={() => setOpenInvoiceDialog(true)}
            >
              Create Invoice
            </Button>
          </Box>

          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Invoice #</TableCell>
                  <TableCell>Client</TableCell>
                  <TableCell>Date</TableCell>
                  <TableCell>Due Date</TableCell>
                  <TableCell align="right">Amount</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {invoices.map((invoice) => (
                  <TableRow key={invoice.id}>
                    <TableCell>{invoice.invoice_number}</TableCell>
                    <TableCell>{invoice.client_name}</TableCell>
                    <TableCell>{formatDate(invoice.invoice_date)}</TableCell>
                    <TableCell>{formatDate(invoice.due_date)}</TableCell>
                    <TableCell align="right">{formatCurrency(invoice.total_amount)}</TableCell>
                    <TableCell>
                      <Chip 
                        label={invoice.status} 
                        color={invoice.status === 'paid' ? 'success' : 
                               invoice.status === 'overdue' ? 'error' : 'warning'}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Tooltip title="View">
                        <IconButton size="small" onClick={() => {
  			setSelectedInvoice(invoice);
   			 setOpenViewInvoiceDialog(true);
 			 }}>
                          <Visibility />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Send">
                        <IconButton size="small" onClick={() => handleSendInvoice(invoice.id)}>
                          <Email />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Download">
                        <IconButton size="small" onClick={() => handleDownloadInvoice(invoice.id)}>
                          <Download />
                        </IconButton>
                      </Tooltip>
                      {invoice.status !== 'paid' && (
                        <Tooltip title="Record Payment">
                          <IconButton 
                            size="small" 
                            onClick={() => {
                              setPaymentForm({ ...paymentForm, invoice_id: invoice.id, amount: invoice.total_amount });
                              setOpenPaymentDialog(true);
                            }}
                          >
                            <Payment />
                          </IconButton>
                        </Tooltip>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>

        {/* Expenses Tab */}
        <TabPanel value={tabValue} index={2}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">Expenses</Typography>
            <Button
              variant="contained"
              startIcon={<Add />}
              onClick={() => setOpenExpenseDialog(true)}
            >
              Record Expense
            </Button>
          </Box>

          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Date</TableCell>
                  <TableCell>Category</TableCell>
                  <TableCell>Vendor</TableCell>
                  <TableCell>Description</TableCell>
                  <TableCell>Assigned To</TableCell>
                  <TableCell align="right">Amount</TableCell>
                  <TableCell>Payment Method</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {expenses.map((expense) => (
                  <TableRow key={expense.id}>
                    <TableCell>{formatDate(expense.expense_date)}</TableCell>
                    <TableCell>{expense.category}</TableCell>
                    <TableCell>{expense.vendor || '-'}</TableCell>
                    <TableCell>{expense.description}</TableCell>
                    <TableCell>
                      {expense.expense_type === 'company' && 'Company'}
                      {expense.expense_type === 'department' && `Dept: ${expense.department}`}
                      {expense.expense_type === 'project' && expense.project_title}
                      {expense.expense_type === 'client' && expense.client_name}
                    </TableCell>
                    <TableCell align="right">{formatCurrency(expense.amount)}</TableCell>
                    <TableCell>{expense.payment_method || '-'}</TableCell>
                    <TableCell>
                      <Chip 
                        label={expense.status} 
                        color={expense.status === 'approved' ? 'success' : 
                               expense.status === 'rejected' ? 'error' : 'warning'}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Tooltip title="Edit">
                        <IconButton 
                          size="small" 
                          onClick={() => handleEditExpense(expense)}
                        >
                          <Edit />
                        </IconButton>
                      </Tooltip>
                      {isAdmin && expense.status === 'pending' && (
                        <>
                          <Tooltip title="Approve">
                            <IconButton 
                              size="small" 
                              color="success"
                              onClick={() => handleUpdateExpenseStatus(expense.id, 'approved')}
                            >
                              <CheckCircle />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Reject">
                            <IconButton 
                              size="small" 
                              color="error"
                              onClick={() => handleUpdateExpenseStatus(expense.id, 'rejected')}
                            >
                              <Cancel />
                            </IconButton>
                          </Tooltip>
                        </>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>

        {/* Settings Tab */}
        {isAdmin && (
          <TabPanel value={tabValue} index={3}>
            <Typography variant="h6" gutterBottom>
              Financial Settings
            </Typography>
            
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Typography variant="subtitle1" gutterBottom>
                  Company Information
                </Typography>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="Company Name"
                  value={settingsForm.company_name || ''}
                  onChange={(e) => setSettingsForm({ ...settingsForm, company_name: e.target.value })}
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="Tax Number"
                  value={settingsForm.tax_number || ''}
                  onChange={(e) => setSettingsForm({ ...settingsForm, tax_number: e.target.value })}
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  multiline
                  rows={2}
                  label="Company Address"
                  value={settingsForm.company_address || ''}
                  onChange={(e) => setSettingsForm({ ...settingsForm, company_address: e.target.value })}
                />
              </Grid>
              
              <Grid item xs={12}>
                <Button variant="contained" onClick={handleUpdateSettings}>
                  Update Company Settings
                </Button>
              </Grid>
              
              <Grid item xs={12}>
                <Box display="flex" justifyContent="space-between" alignItems="center" mt={3}>
                  <Typography variant="subtitle1">
                    Bank Accounts
                  </Typography>
                  <Button
                    variant="outlined"
                    startIcon={<Add />}
                    onClick={() => setOpenBankDialog(true)}
                  >
                    Add Bank
                  </Button>
                </Box>
              </Grid>
              
              <Grid item xs={12}>
                <TableContainer component={Paper}>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Bank Name</TableCell>
                        <TableCell>Account Name</TableCell>
                        <TableCell>Account Number</TableCell>
                        <TableCell>Account Type</TableCell>
                        <TableCell>Primary</TableCell>
                        <TableCell>Actions</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {banks.map((bank) => (
                        <TableRow key={bank.id}>
                          <TableCell>{bank.bank_name}</TableCell>
                          <TableCell>{bank.account_name || '-'}</TableCell>
                          <TableCell>{bank.account_number || '-'}</TableCell>
                          <TableCell>{bank.account_type || '-'}</TableCell>
                          <TableCell>
                            {bank.is_primary && <CheckCircle color="success" />}
                          </TableCell>
                          <TableCell>
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => handleDeleteBank(bank.id)}
                            >
                              <Delete />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>
            </Grid>
          </TabPanel>
        )}
      </Paper>

      {/* Dialogs */}
      {/* Create Invoice Dialog */}
      <Dialog open={openInvoiceDialog} onClose={() => setOpenInvoiceDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>Create Invoice</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2 }}>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth required>
                  <InputLabel>Client</InputLabel>
                  <Select
                    value={invoiceForm.client_id}
                    label="Client"
                    onChange={(e) => setInvoiceForm({ ...invoiceForm, client_id: e.target.value })}
                  >
                    {clients.map(client => (
                      <MenuItem key={client.id} value={client.id}>
                        {client.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth>
                  <InputLabel>Project</InputLabel>
                  <Select
                    value={invoiceForm.project_id}
                    label="Project"
                    onChange={(e) => setInvoiceForm({ ...invoiceForm, project_id: e.target.value })}
                  >
                    <MenuItem value="">None</MenuItem>
                    {projects.map(project => (
                      <MenuItem key={project.id} value={project.id}>
                        {project.title}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="date"
                  label="Invoice Date"
                  value={invoiceForm.invoice_date}
                  onChange={(e) => setInvoiceForm({ ...invoiceForm, invoice_date: e.target.value })}
                  InputLabelProps={{ shrink: true }}
                  required
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="date"
                  label="Due Date"
                  value={invoiceForm.due_date}
                  onChange={(e) => setInvoiceForm({ ...invoiceForm, due_date: e.target.value })}
                  InputLabelProps={{ shrink: true }}
                  required
                />
              </Grid>
              
              <Grid item xs={12}>
                <Typography variant="subtitle1" gutterBottom>
                  Invoice Items
                </Typography>
                {invoiceForm.items.map((item, index) => (
                  <Grid container spacing={2} key={index} sx={{ mb: 2 }}>
                    <Grid item xs={12} sm={5}>
                      <TextField
                        fullWidth
                        label="Description"
                        value={item.description}
                        onChange={(e) => updateInvoiceItem(index, 'description', e.target.value)}
                        required
                      />
                    </Grid>
                    <Grid item xs={12} sm={2}>
                      <TextField
                        fullWidth
                        type="number"
                        label="Quantity"
                        value={item.quantity}
                        onChange={(e) => updateInvoiceItem(index, 'quantity', e.target.value)}
                        required
                      />
                    </Grid>
                    <Grid item xs={12} sm={3}>
                      <TextField
                        fullWidth
                        type="number"
                        label="Unit Price"
                        value={item.unit_price}
                        onChange={(e) => updateInvoiceItem(index, 'unit_price', e.target.value)}
                        InputProps={{
                          startAdornment: <InputAdornment position="start">₦</InputAdornment>
                        }}
                        required
                      />
                    </Grid>
                    <Grid item xs={12} sm={2}>
                      <Box display="flex" alignItems="center" height="100%">
                        <Typography>
                          ₦{(item.quantity * item.unit_price).toFixed(2)}
                        </Typography>
                        {invoiceForm.items.length > 1 && (
                          <IconButton
                            size="small"
                            color="error"
                            onClick={() => removeInvoiceItem(index)}
                            sx={{ ml: 1 }}
                          >
                            <Delete />
                          </IconButton>
                        )}
                      </Box>
                    </Grid>
                  </Grid>
                ))}
                <Button
                  startIcon={<Add />}
                  onClick={addInvoiceItem}
                  size="small"
                >
                  Add Item
                </Button>
              </Grid>
              
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  type="number"
                  label="Tax Rate (%)"
                  value={invoiceForm.tax_rate}
                  onChange={(e) => setInvoiceForm({ 
                    ...invoiceForm, 
                    tax_rate: parseFloat(e.target.value) || 0 
                  })}
                />
              </Grid>
              
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  type="number"
                  label="Discount"
                  value={invoiceForm.discount}
                  onChange={(e) => setInvoiceForm({ 
                    ...invoiceForm, 
                    discount: parseFloat(e.target.value) || 0 
                  })}
                  InputProps={{
                    startAdornment: <InputAdornment position="start">₦</InputAdornment>
                  }}
                />
              </Grid>
              
              <Grid item xs={12} sm={4}>
                <Box display="flex" justifyContent="flex-end">
                  <Box>
                    <Typography variant="body2">
                      Subtotal: {formatCurrency(calculateInvoiceTotal().subtotal)}
                    </Typography>
                    <Typography variant="body2">
                      Tax: {formatCurrency(calculateInvoiceTotal().tax)}
                    </Typography>
                    <Typography variant="h6">
                      Total: {formatCurrency(calculateInvoiceTotal().total)}
                    </Typography>
                  </Box>
                </Box>
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  multiline
                  rows={3}
                  label="Notes"
                  value={invoiceForm.notes}
                  onChange={(e) => setInvoiceForm({ ...invoiceForm, notes: e.target.value })}
                />
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenInvoiceDialog(false)}>Cancel</Button>
          <Button onClick={handleCreateInvoice} variant="contained">Create Invoice</Button>
        </DialogActions>
      </Dialog>

      {/* Record Payment Dialog */}
      <Dialog open={openPaymentDialog} onClose={() => setOpenPaymentDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Record Payment</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2 }}>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  type="date"
                  label="Payment Date"
                  value={paymentForm.payment_date}
                  onChange={(e) => setPaymentForm({ ...paymentForm, payment_date: e.target.value })}
                  InputLabelProps={{ shrink: true }}
                  required
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  type="number"
                  label="Amount"
                  value={paymentForm.amount}
                  onChange={(e) => setPaymentForm({ ...paymentForm, amount: parseFloat(e.target.value) || 0 })}
                  InputProps={{
                    startAdornment: <InputAdornment position="start">₦</InputAdornment>
                  }}
                  required
                />
              </Grid>
              <Grid item xs={12}>
                <FormControl fullWidth required>
                  <InputLabel>Payment Method</InputLabel>
                  <Select
                    value={paymentForm.payment_method}
                    label="Payment Method"
                    onChange={(e) => setPaymentForm({ ...paymentForm, payment_method: e.target.value })}
                  >
                    {paymentMethods.map(method => (
                      <MenuItem key={method.value} value={method.value}>
                        {method.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Reference Number"
                  value={paymentForm.reference_number}
                  onChange={(e) => setPaymentForm({ ...paymentForm, reference_number: e.target.value })}
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  multiline
                  rows={2}
                  label="Notes"
                  value={paymentForm.notes}
                  onChange={(e) => setPaymentForm({ ...paymentForm, notes: e.target.value })}
                />
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenPaymentDialog(false)}>Cancel</Button>
          <Button onClick={handleRecordPayment} variant="contained">Record Payment</Button>
        </DialogActions>
      </Dialog>

      {/* Create Expense Dialog */}
      <Dialog open={openExpenseDialog} onClose={() => setOpenExpenseDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Record Expense</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2 }}>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  type="date"
                  label="Expense Date"
                  value={expenseForm.expense_date}
                  onChange={(e) => setExpenseForm({ ...expenseForm, expense_date: e.target.value })}
                  InputLabelProps={{ shrink: true }}
                  required
                />
              </Grid>
              
              <Grid item xs={12}>
                <FormControl fullWidth required>
                  <InputLabel>Expense Type</InputLabel>
                  <Select
                    value={expenseForm.expense_type}
                    label="Expense Type"
                    onChange={(e) => setExpenseForm({ 
                      ...expenseForm, 
                      expense_type: e.target.value,
                      project_id: '',
                      client_id: '',
                      department: ''
                    })}
                  >
                    {expenseTypes.map(type => (
                      <MenuItem key={type.value} value={type.value}>
                        {type.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              {expenseForm.expense_type === 'department' && (
                <Grid item xs={12}>
                  <FormControl fullWidth required>
                    <InputLabel>Department</InputLabel>
                    <Select
                      value={expenseForm.department}
                      label="Department"
                      onChange={(e) => setExpenseForm({ ...expenseForm, department: e.target.value })}
                    >
                      {departments.map(dept => (
                        <MenuItem key={dept} value={dept}>
                          {dept}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              )}
              
              {expenseForm.expense_type === 'project' && (
                <Grid item xs={12}>
                  <FormControl fullWidth required>
                    <InputLabel>Project</InputLabel>
                    <Select
                      value={expenseForm.project_id}
                      label="Project"
                      onChange={(e) => setExpenseForm({ ...expenseForm, project_id: e.target.value })}
                    >
                      {projects.map(project => (
                        <MenuItem key={project.id} value={project.id}>
                          {project.title}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              )}
              
              {expenseForm.expense_type === 'client' && (
                <Grid item xs={12}>
                  <FormControl fullWidth required>
                    <InputLabel>Client</InputLabel>
                    <Select
                      value={expenseForm.client_id}
                      label="Client"
                      onChange={(e) => setExpenseForm({ ...expenseForm, client_id: e.target.value })}
                    >
                      {clients.map(client => (
                        <MenuItem key={client.id} value={client.id}>
                          {client.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              )}
              
              <Grid item xs={12}>
                <FormControl fullWidth required>
                  <InputLabel>Category</InputLabel>
                  <Select
                    value={expenseForm.category}
                    label="Category"
                    onChange={(e) => setExpenseForm({ ...expenseForm, category: e.target.value })}
                  >
                    {expenseCategories.map(category => (
                      <MenuItem key={category} value={category}>
                        {category}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Vendor"
                  value={expenseForm.vendor}
                  onChange={(e) => setExpenseForm({ ...expenseForm, vendor: e.target.value })}
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Description"
                  value={expenseForm.description}
                  onChange={(e) => setExpenseForm({ ...expenseForm, description: e.target.value })}
                  multiline
                  rows={2}
                  required
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  type="number"
                  label="Amount"
                  value={expenseForm.amount}
                  onChange={(e) => setExpenseForm({ ...expenseForm, amount: parseFloat(e.target.value) || 0 })}
                  InputProps={{
                    startAdornment: <InputAdornment position="start">₦</InputAdornment>
                  }}
                  required
                />
              </Grid>
              
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Payment Method</InputLabel>
                  <Select
                    value={expenseForm.payment_method}
                    label="Payment Method"
                    onChange={(e) => setExpenseForm({ ...expenseForm, payment_method: e.target.value })}
                  >
                    <MenuItem value="">None</MenuItem>
                    {paymentMethods.map(method => (
                      <MenuItem key={method.value} value={method.value}>
                        {method.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenExpenseDialog(false)}>Cancel</Button>
          <Button 
            onClick={handleCreateExpense} 
            variant="contained"
            disabled={creatingExpense}
          >
            {creatingExpense ? 'Recording...' : 'Record Expense'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Edit Expense Dialog */}
      <Dialog open={openEditExpenseDialog} onClose={() => setOpenEditExpenseDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Edit Expense</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2 }}>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  type="date"
                  label="Expense Date"
                  value={expenseForm.expense_date}
                  onChange={(e) => setExpenseForm({ ...expenseForm, expense_date: e.target.value })}
                  InputLabelProps={{ shrink: true }}
                  required
                />
              </Grid>
              
              <Grid item xs={12}>
                <FormControl fullWidth required>
                  <InputLabel>Expense Type</InputLabel>
                  <Select
                    value={expenseForm.expense_type}
                    label="Expense Type"
                    onChange={(e) => setExpenseForm({ 
                      ...expenseForm, 
                      expense_type: e.target.value,
                      project_id: '',
                      client_id: '',
                      department: ''
                    })}
                  >
                    {expenseTypes.map(type => (
                      <MenuItem key={type.value} value={type.value}>
                        {type.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              {expenseForm.expense_type === 'department' && (
                <Grid item xs={12}>
                  <FormControl fullWidth required>
                    <InputLabel>Department</InputLabel>
                    <Select
                      value={expenseForm.department}
                      label="Department"
                      onChange={(e) => setExpenseForm({ ...expenseForm, department: e.target.value })}
                    >
                      {departments.map(dept => (
                        <MenuItem key={dept} value={dept}>
                          {dept}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              )}
              
              {expenseForm.expense_type === 'project' && (
                <Grid item xs={12}>
                  <FormControl fullWidth required>
                    <InputLabel>Project</InputLabel>
                    <Select
                      value={expenseForm.project_id}
                      label="Project"
                      onChange={(e) => setExpenseForm({ ...expenseForm, project_id: e.target.value })}
                    >
                      {projects.map(project => (
                        <MenuItem key={project.id} value={project.id}>
                          {project.title}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              )}
              
              {expenseForm.expense_type === 'client' && (
                <Grid item xs={12}>
                  <FormControl fullWidth required>
                    <InputLabel>Client</InputLabel>
                    <Select
                      value={expenseForm.client_id}
                      label="Client"
                      onChange={(e) => setExpenseForm({ ...expenseForm, client_id: e.target.value })}
                    >
                      {clients.map(client => (
                        <MenuItem key={client.id} value={client.id}>
                          {client.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              )}
              
              <Grid item xs={12}>
                <FormControl fullWidth required>
                  <InputLabel>Category</InputLabel>
                  <Select
                    value={expenseForm.category}
                    label="Category"
                    onChange={(e) => setExpenseForm({ ...expenseForm, category: e.target.value })}
                  >
                    {expenseCategories.map(category => (
                      <MenuItem key={category} value={category}>
                        {category}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Vendor"
                  value={expenseForm.vendor}
                  onChange={(e) => setExpenseForm({ ...expenseForm, vendor: e.target.value })}
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Description"
                  value={expenseForm.description}
                  onChange={(e) => setExpenseForm({ ...expenseForm, description: e.target.value })}
                  multiline
                  rows={2}
                  required
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  type="number"
                  label="Amount"
                  value={expenseForm.amount}
                  onChange={(e) => setExpenseForm({ ...expenseForm, amount: parseFloat(e.target.value) || 0 })}
                  InputProps={{
                    startAdornment: <InputAdornment position="start">₦</InputAdornment>
                  }}
                  required
                />
              </Grid>
              
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Payment Method</InputLabel>
                  <Select
                    value={expenseForm.payment_method}
                    label="Payment Method"
                    onChange={(e) => setExpenseForm({ ...expenseForm, payment_method: e.target.value })}
                  >
                    <MenuItem value="">None</MenuItem>
                    {paymentMethods.map(method => (
                      <MenuItem key={method.value} value={method.value}>
                        {method.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => {
            setOpenEditExpenseDialog(false);
            setEditingExpense(null);
          }}>Cancel</Button>
          <Button onClick={handleUpdateExpense} variant="contained">Update Expense</Button>
        </DialogActions>
      </Dialog>

      {/* Add Bank Dialog */}
      <Dialog open={openBankDialog} onClose={() => setOpenBankDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Add Bank Account</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2 }}>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Bank Name"
                  value={bankForm.bank_name}
                  onChange={(e) => setBankForm({ ...bankForm, bank_name: e.target.value })}
                  required
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Account Name"
                  value={bankForm.account_name}
                  onChange={(e) => setBankForm({ ...bankForm, account_name: e.target.value })}
                  required
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Account Number"
                  value={bankForm.account_number}
                  onChange={(e) => setBankForm({ ...bankForm, account_number: e.target.value })}
                  required
                />
              </Grid>
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Account Type</InputLabel>
                  <Select
                    value={bankForm.account_type}
                    label="Account Type"
                    onChange={(e) => setBankForm({ ...bankForm, account_type: e.target.value })}
                  >
                    <MenuItem value="current">Current</MenuItem>
                    <MenuItem value="savings">Savings</MenuItem>
                    <MenuItem value="fixed">Fixed Deposit</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenBankDialog(false)}>Cancel</Button>
          <Button onClick={handleAddBank} variant="contained">Add Bank</Button>
        </DialogActions>
      </Dialog>
{/* View Invoice Dialog */}
<Dialog open={openViewInvoiceDialog} onClose={() => setOpenViewInvoiceDialog(false)} maxWidth="md" fullWidth>
  <DialogTitle>
    Invoice #{selectedInvoice?.invoice_number}
    <IconButton
      aria-label="close"
      onClick={() => setOpenViewInvoiceDialog(false)}
      sx={{ position: 'absolute', right: 8, top: 8 }}
    >
      <Cancel />
    </IconButton>
  </DialogTitle>
  <DialogContent dividers>
    {selectedInvoice && (
      <Box>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
            <Typography variant="subtitle2">Client</Typography>
            <Typography>{selectedInvoice.client_name}</Typography>
          </Grid>
          <Grid item xs={12} sm={6}>
            <Typography variant="subtitle2">Status</Typography>
            <Chip 
              label={selectedInvoice.status} 
              color={selectedInvoice.status === 'paid' ? 'success' : 
                     selectedInvoice.status === 'overdue' ? 'error' : 'warning'}
              size="small"
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <Typography variant="subtitle2">Invoice Date</Typography>
            <Typography>{formatDate(selectedInvoice.invoice_date)}</Typography>
          </Grid>
          <Grid item xs={12} sm={6}>
            <Typography variant="subtitle2">Due Date</Typography>
            <Typography>{formatDate(selectedInvoice.due_date)}</Typography>
          </Grid>
          <Grid item xs={12}>
            <Divider sx={{ my: 2 }} />
          </Grid>
          <Grid item xs={12}>
            <Typography variant="subtitle2" gutterBottom>Items</Typography>
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Description</TableCell>
                    <TableCell align="right">Qty</TableCell>
                    <TableCell align="right">Price</TableCell>
                    <TableCell align="right">Total</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {selectedInvoice.items?.map((item, index) => (
                    <TableRow key={index}>
                      <TableCell>{item.description}</TableCell>
                      <TableCell align="right">{item.quantity}</TableCell>
                      <TableCell align="right">{formatCurrency(item.unit_price)}</TableCell>
                      <TableCell align="right">{formatCurrency(item.quantity * item.unit_price)}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Grid>
          <Grid item xs={12}>
            <Box display="flex" justifyContent="flex-end" mt={2}>
              <Box>
                <Typography variant="body2">Subtotal: {formatCurrency(selectedInvoice.subtotal)}</Typography>
                <Typography variant="body2">Tax: {formatCurrency(selectedInvoice.tax_amount)}</Typography>
                <Typography variant="body2">Discount: {formatCurrency(selectedInvoice.discount_amount)}</Typography>
                <Divider />
                <Typography variant="h6">Total: {formatCurrency(selectedInvoice.total_amount)}</Typography>
                {selectedInvoice.amount_paid > 0 && (
                  <>
                    <Typography variant="body2" color="success.main">
                      Paid: {formatCurrency(selectedInvoice.amount_paid)}
                    </Typography>
                    <Typography variant="body2" color="error.main">
                      Balance: {formatCurrency(selectedInvoice.total_amount - selectedInvoice.amount_paid)}
                    </Typography>
                  </>
                )}
              </Box>
            </Box>
          </Grid>
        </Grid>
      </Box>
    )}
  </DialogContent>
  <DialogActions>
    <Button onClick={() => setOpenViewInvoiceDialog(false)}>Close</Button>
    <Button onClick={() => handleDownloadInvoice(selectedInvoice.id)} startIcon={<Download />}>
      Download PDF
    </Button>
  </DialogActions>
</Dialog>    

</Box>
  );
}

export default Financial;
